/*
 * Plesk RESTful API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package de.tinysite.flufl.plesk.rest.dto;

import java.time.LocalDate;
import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * DomainResponse
 */

public class DomainResponse {
  @JsonProperty("id")
  private Integer id = null;

  @JsonProperty("name")
  private String name = null;

  @JsonProperty("ascii_name")
  private String asciiName = null;

  /**
   * Domain hosting type.
   */
  public enum HostingTypeEnum {
    VIRTUAL("virtual"),
    STANDARD_FORWARDING("standard_forwarding"),
    FRAME_FORWARDING("frame_forwarding"),
    NONE("none");

    private String value;

    HostingTypeEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static HostingTypeEnum fromValue(String text) {
      for (HostingTypeEnum b : HostingTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("hosting_type")
  private HostingTypeEnum hostingType = null;

  @JsonProperty("base_domain_id")
  private Integer baseDomainId = null;

  @JsonProperty("www_root")
  private String wwwRoot = null;

  @JsonProperty("guid")
  private String guid = null;

  @JsonProperty("created")
  private LocalDate created = null;

  public DomainResponse id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Domain ID.
   * @return id
  **/
  @Schema(example = "7", required = true, description = "Domain ID.")
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public DomainResponse name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Domain name.
   * @return name
  **/
  @Schema(example = "example.com", required = true, description = "Domain name.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public DomainResponse asciiName(String asciiName) {
    this.asciiName = asciiName;
    return this;
  }

   /**
   * Domain display name.
   * @return asciiName
  **/
  @Schema(example = "ascii-example.com", required = true, description = "Domain display name.")
  public String getAsciiName() {
    return asciiName;
  }

  public void setAsciiName(String asciiName) {
    this.asciiName = asciiName;
  }

  public DomainResponse hostingType(HostingTypeEnum hostingType) {
    this.hostingType = hostingType;
    return this;
  }

   /**
   * Domain hosting type.
   * @return hostingType
  **/
  @Schema(required = true, description = "Domain hosting type.")
  public HostingTypeEnum getHostingType() {
    return hostingType;
  }

  public void setHostingType(HostingTypeEnum hostingType) {
    this.hostingType = hostingType;
  }

  public DomainResponse baseDomainId(Integer baseDomainId) {
    this.baseDomainId = baseDomainId;
    return this;
  }

   /**
   * Base domain ID.
   * @return baseDomainId
  **/
  @Schema(example = "3", required = true, description = "Base domain ID.")
  public Integer getBaseDomainId() {
    return baseDomainId;
  }

  public void setBaseDomainId(Integer baseDomainId) {
    this.baseDomainId = baseDomainId;
  }

  public DomainResponse wwwRoot(String wwwRoot) {
    this.wwwRoot = wwwRoot;
    return this;
  }

   /**
   * WWW Root on filesystem
   * @return wwwRoot
  **/
  @Schema(example = "/var/www/vhosts/example.com/httpdocs", required = true, description = "WWW Root on filesystem")
  public String getWwwRoot() {
    return wwwRoot;
  }

  public void setWwwRoot(String wwwRoot) {
    this.wwwRoot = wwwRoot;
  }

  public DomainResponse guid(String guid) {
    this.guid = guid;
    return this;
  }

   /**
   * Domain GUID.
   * @return guid
  **/
  @Schema(example = "b623e93d-dc72-4102-b5f0-ded427cf0fb1", required = true, description = "Domain GUID.")
  public String getGuid() {
    return guid;
  }

  public void setGuid(String guid) {
    this.guid = guid;
  }

  public DomainResponse created(LocalDate created) {
    this.created = created;
    return this;
  }

   /**
   * Creation date.
   * @return created
  **/
  @Schema(example = "Sun Nov 13 01:00:00 CET 2016", required = true, description = "Creation date.")
  public LocalDate getCreated() {
    return created;
  }

  public void setCreated(LocalDate created) {
    this.created = created;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DomainResponse domainResponse = (DomainResponse) o;
    return Objects.equals(this.id, domainResponse.id) &&
        Objects.equals(this.name, domainResponse.name) &&
        Objects.equals(this.asciiName, domainResponse.asciiName) &&
        Objects.equals(this.hostingType, domainResponse.hostingType) &&
        Objects.equals(this.baseDomainId, domainResponse.baseDomainId) &&
        Objects.equals(this.wwwRoot, domainResponse.wwwRoot) &&
        Objects.equals(this.guid, domainResponse.guid) &&
        Objects.equals(this.created, domainResponse.created);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, asciiName, hostingType, baseDomainId, wwwRoot, guid, created);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DomainResponse {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    asciiName: ").append(toIndentedString(asciiName)).append("\n");
    sb.append("    hostingType: ").append(toIndentedString(hostingType)).append("\n");
    sb.append("    baseDomainId: ").append(toIndentedString(baseDomainId)).append("\n");
    sb.append("    wwwRoot: ").append(toIndentedString(wwwRoot)).append("\n");
    sb.append("    guid: ").append(toIndentedString(guid)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
